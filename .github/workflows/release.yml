name: Release to Crates.io

on:
  workflow_dispatch:
    inputs:
      version_action:
        description: 'Version action to perform'
        required: false
        default: 'current'
        type: choice
        options:
          - current
          - patch
          - minor
          - major
      dry_run:
        description: 'Perform a dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: read

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: ${{ inputs.dry_run && format('ðŸ”¥ Dry Run Release ({0})', inputs.version_action) || format('ðŸ“¦ Manual Release ({0})', inputs.version_action) }}
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: Install cargo-edit for version bumping
        if: ${{ !inputs.dry_run && inputs.version_action != 'current' }}
        run: cargo install cargo-edit
          
      - name: Bump version
        if: ${{ !inputs.dry_run && inputs.version_action != 'current' }}
        run: |
          echo "Bumping version with type: ${{ inputs.version_action }}"
          cargo set-version --bump ${{ inputs.version_action }}
          git config user.name "otplus-actions[bot]"
          git config user.email "otplus-actions[bot]@users.noreply.github.com"
          git add Cargo.toml
          git commit -m "Bump version (${{ inputs.version_action }})"
          git push
          
      - name: Get package version
        id: version
        run: |
          VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "dry_run=${{ inputs.dry_run || false }}" >> $GITHUB_OUTPUT
          
      - name: Check if tag exists
        id: tag_check
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Build release
        if: steps.tag_check.outputs.exists == 'false'
        run: cargo build --release --verbose
        
      - name: Run tests
        if: steps.tag_check.outputs.exists == 'false'
        run: cargo test --verbose
        
      - name: Publish to crates.io (Dry Run)
        if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.dry_run == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}
        run: |
          echo "ðŸ”¥ DRY RUN: Would publish version ${{ steps.version.outputs.version }} to crates.io..."
          cargo publish --dry-run --verbose
          
      - name: Publish to crates.io
        if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.dry_run == 'false'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}
        run: |
          echo "ðŸ“¦ Publishing version ${{ steps.version.outputs.version }} to crates.io..."
          cargo publish --verbose
          
      - name: Create Git tag
        if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.dry_run == 'false'
        run: |
          git config user.name "otplus-actions[bot]"
          git config user.email "otplus-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release version ${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.tag }}"
          
      - name: Create GitHub Release
        if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.dry_run == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Release Notes

            ### Changes in version ${{ steps.version.outputs.version }}
            
            This release includes updates to the otplus-core library.
            
            ### Installation
            
            Add this to your `Cargo.toml`:
            
            ```toml
            [dependencies]
            otplus-core = "${{ steps.version.outputs.version }}"
            ```
            
            ### Crates.io
            
            This release is available on [crates.io](https://crates.io/crates/otplus-core/${{ steps.version.outputs.version }}).
          draft: false
          prerelease: false
          
      - name: Upload release artifact
        if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.dry_run == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/libotplus_core.rlib
          asset_name: libotplus_core-${{ steps.version.outputs.version }}.rlib
          asset_content_type: application/octet-stream
          
      - name: Summary
        run: |
          echo "## ðŸš€ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: Manual by @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.version.outputs.dry_run }}" == "true" ]; then
            echo "- **Mode**: ðŸ”¥ Dry Run (khÃ´ng thá»±c sá»± publish)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Mode**: ðŸ“¦ Production Release" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Version Action**: ${{ inputs.version_action }}" >> $GITHUB_STEP_SUMMARY
