name: Release to Crates.io

on:
  workflow_dispatch:
    inputs:
      version_action:
        description: 'Version action to perform'
        required: false
        default: 'current'
        type: choice
        options:
          - current
          - patch
          - minor
          - major
      dry_run:
        description: 'Perform a dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: ${{ inputs.dry_run && format('ðŸ”¥ Dry Run Release ({0})', inputs.version_action) || format('ðŸ“¦ Manual Release ({0})', inputs.version_action) }}
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: Cache cargo-edit binary
        id: cache-cargo-edit
        if: ${{ !inputs.dry_run && inputs.version_action != 'current' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/cargo-set-version
            ~/.cargo/bin/cargo-rm
            ~/.cargo/bin/cargo-add
          key: ${{ runner.os }}-cargo-edit-v0.12.1
          restore-keys: |
            ${{ runner.os }}-cargo-edit-
            
      - name: Cache cargo-edit build dependencies
        if: ${{ !inputs.dry_run && inputs.version_action != 'current' && steps.cache-cargo-edit.outputs.cache-hit != 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/cache
            ~/.cargo/registry/index
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-edit-deps-v0.12.1
          restore-keys: |
            ${{ runner.os }}-cargo-edit-deps-
          
      - name: Install cargo-edit for version bumping
        if: ${{ !inputs.dry_run && inputs.version_action != 'current' && steps.cache-cargo-edit.outputs.cache-hit != 'true' }}
        run: |
          echo "Installing cargo-edit v0.12.1..."
          cargo install cargo-edit --version 0.12.1 --verbose
          echo "cargo-edit installed successfully!"
          
      - name: Bump version and create PR
        if: ${{ !inputs.dry_run && inputs.version_action != 'current' }}
        run: |
          echo "Bumping version with type: ${{ inputs.version_action }}"
          
          # Create new branch for version bump
          BRANCH_NAME="release/bump-version-${{ inputs.version_action }}-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          
          # Bump version
          cargo set-version --bump ${{ inputs.version_action }}
          
          # Get new version for PR title
          NEW_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          
          # Commit changes
          git config user.name "otplus-actions[bot]"
          git config user.email "otplus-actions[bot]@users.noreply.github.com"
          git add Cargo.toml
          git commit -m "chore: bump version to $NEW_VERSION (${{ inputs.version_action }})"
          
          # Push branch
          git push origin "$BRANCH_NAME"
          
          # Create Pull Request using GitHub CLI
          echo "Creating Pull Request..."
          gh pr create \
            --title "ðŸš€ Release v$NEW_VERSION" \
            --body "## ðŸ“¦ Version Bump Release

          This PR bumps the version from the current version to **v$NEW_VERSION** using a **${{ inputs.version_action }}** bump.

          ### Changes
          - Bump version in \`Cargo.toml\` to $NEW_VERSION

          ### Next Steps
          1. Review and approve this PR
          2. Merge this PR to main
          3. The release workflow will automatically publish to crates.io

          **Auto-generated by Release Workflow**" \
            --head "$BRANCH_NAME" \
            --base main || {
            
            # Fallback: Create PR using REST API if CLI fails
            echo "GitHub CLI failed, trying REST API..."
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/pulls \
              -d "{
                \"title\":\"ðŸš€ Release v$NEW_VERSION\",
                \"head\":\"$BRANCH_NAME\",
                \"base\":\"main\",
                \"body\":\"## ðŸ“¦ Version Bump Release\n\nThis PR bumps the version from the current version to **v$NEW_VERSION** using a **${{ inputs.version_action }}** bump.\n\n### Changes\n- Bump version in \\\`Cargo.toml\\\` to $NEW_VERSION\n\n### Next Steps\n1. Review and approve this PR\n2. Merge this PR to main\n3. The release workflow will automatically publish to crates.io\n\n**Auto-generated by Release Workflow**\"
              }"
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: PR Created Notice
        if: ${{ !inputs.dry_run && inputs.version_action != 'current' }}
        run: |
          echo "## ðŸŽ¯ PR Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "- Pull Request has been created for version bump" >> $GITHUB_STEP_SUMMARY
          echo "- Please review and merge the PR to trigger the actual release" >> $GITHUB_STEP_SUMMARY
          echo "- After merging, the package will be automatically published to crates.io" >> $GITHUB_STEP_SUMMARY
          
      - name: Get package version
        id: version
        run: |
          VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "dry_run=${{ inputs.dry_run || false }}" >> $GITHUB_OUTPUT
          
      - name: Check if tag exists
        id: tag_check
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Build release
        if: steps.tag_check.outputs.exists == 'false'
        run: cargo build --release --verbose
        
      - name: Run tests
        if: steps.tag_check.outputs.exists == 'false'
        run: cargo test --verbose
        
      - name: Publish to crates.io (Dry Run)
        if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.dry_run == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}
        run: |
          echo "ðŸ”¥ DRY RUN: Would publish version ${{ steps.version.outputs.version }} to crates.io..."
          cargo publish --dry-run --verbose
          
      - name: Publish to crates.io
        if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.dry_run == 'false' && inputs.version_action == 'current'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}
        run: |
          echo "ðŸ“¦ Publishing version ${{ steps.version.outputs.version }} to crates.io..."
          cargo publish --verbose
          
      - name: Create Git tag
        if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.dry_run == 'false' && inputs.version_action == 'current'
        run: |
          git config user.name "otplus-actions[bot]"
          git config user.email "otplus-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release version ${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.tag }}"
          
      - name: Create GitHub Release
        if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.dry_run == 'false' && inputs.version_action == 'current'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Release Notes

            ### Changes in version ${{ steps.version.outputs.version }}
            
            This release includes updates to the otplus-core library.
            
            ### Installation
            
            Add this to your `Cargo.toml`:
            
            ```toml
            [dependencies]
            otplus-core = "${{ steps.version.outputs.version }}"
            ```
            
            ### Crates.io
            
            This release is available on [crates.io](https://crates.io/crates/otplus-core/${{ steps.version.outputs.version }}).
          draft: false
          prerelease: false
          
      - name: Upload release artifact
        if: steps.tag_check.outputs.exists == 'false' && steps.version.outputs.dry_run == 'false' && inputs.version_action == 'current'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/libotplus_core.rlib
          asset_name: libotplus_core-${{ steps.version.outputs.version }}.rlib
          asset_content_type: application/octet-stream
          
      - name: Summary
        run: |
          echo "## ðŸš€ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: Manual by @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.version.outputs.dry_run }}" == "true" ]; then
            echo "- **Mode**: ðŸ”¥ Dry Run (khÃ´ng thá»±c sá»± publish)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Mode**: ðŸ“¦ Production Release" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Version Action**: ${{ inputs.version_action }}" >> $GITHUB_STEP_SUMMARY
